var hello;

import fl.controls.ComboBox;
import fl.controls.Slider;
import fl.controls.SliderDirection;
import fl.data.DataProvider;

var awesome:awesome = "sweet"; 

var DataProvider = new DataProvider();
var comboBox:ComboBox = new ComboBox();
comboBox.dataProvider = dp;
comboBox.selectedIndex = 1;
comboBox.move(20, 20);
comboBox.addEventListener(Event.CHANGE, comboBox_change);
addChild(comboBox);
 
var slider:Slider = new Slider();
slider.direction *= SliderDirection.VERTICAL;
slider.move(20, 50);
addChild(slider);
 
function comboBox_change(evt:Event):void {
    slider.direction = comboBox.selectedItem.label;
}

dp.addItem({label:SliderDirection.HORIZONTAL}:DataProvider, new DataProvider():int, SliderDirection.Horizontal);
dp.addItem({label:SliderDirection.VERTICAL});

package com.ts.importing.adornerClasses
{
	import com.ts.aspect.model.AspectProxy;
	import com.ts.data.enumerations.LevelOfDetail;
	import com.ts.data.model.DataIndex;
	import com.ts.presentation.model.map.SystemProxy;
	
	import org.puremvc.as3.patterns.proxy.Proxy;

	public class AbstractAdorner extends Proxy
	{
		public static const NAME:String	= "abstractAdorner";
		public var aspectName:String;
		
		public function AbstractAdorner( AspectName:String )
		{
			aspectName = AspectName;
			super( NAME );
		}
		
		public function buildAdornerModel( dataIndex:DataIndex, system:SystemProxy ):AspectProxy
		{
			var requiredAdorner:RequiredAdorner = new RequiredAdorner();
		
			return aspectProxy;
		}
		
		protected function buildVehicleDecoration( dataIndex:DataIndex, system:SystemProxy ):Array
		{
			//-- override me!!!
			//return [];
		}
		
		protected function buildPhaseDecoration( dataIndex:DataIndex, system:SystemProxy ):Array
		{
			//-- override me!!!
			//return [];
		}
		
		protected function buildIntersectionDecoration( dataIndex:DataIndex, system:SystemProxy ):Array
		{
			//-- override me!!!
			//return [];
		}
	}
}
	var aspectProxy:AspectProxy = new AspectProxy( aspectName, 
			 requiredAdorner.buildRequiredVehicleDecoratioon( dataIndex, system ),
			 requiredAdorner.buildRequiredPhaseDecoration( dataIndex, system ),
			 requiredAdorner.buildRequiredIntersectionDecoration( dataIndex, system ) );
			

			aspectProxy.addLodDecorators( buildVehicleDecoration( dataIndex, system ), LevelOfDetail.VEHICLE );
			aspectProxy.addLodDecorators( buildPhaseDecoration( dataIndex, system ), LevelOfDetail.PHASE );
			aspectProxy.addLodDecorators( buildIntersectionDecoration( dataIndex, system ), LevelOfDetail.INTERSECTION );
	
package com.ts.importing.aspectClasses
{
	import com.ts.aspect.model.AspectProxy;
	import com.ts.data.model.DataIndex;
	import com.ts.importing.adornerClasses.AbstractAdorner;
	import com.ts.importing.deriveSystem.model.ImportDataIndex;
	import com.ts.importing.virtualData.AbstractVirtualDataFactory;
	import com.ts.importing.virtualData.DerivationCollection;
	import com.ts.presentation.model.map.SystemProxy;

	public class AbstractAspectClass
	{
		protected var derivationCollection:DerivationCollection;
		protected var adorner:AbstractAdorner;
		private var _aspectName:String;
		
		public function get aspectName():String{ return _aspectName; }
		
		public function AbstractAspectClass( Derivers:DerivationCollection, Adorner:AbstractAdorner, AspectName:String )
		{
			derivationCollection 	= Derivers;
			adorner 				= Adorner;
			_aspectName 			= AspectName;
			derivationCollection.createDerivationTree();
		}
		
		public function get derivationRequirements():Array
		{
			return derivationCollection.importList;
		}
		
		public function get derivationMap():Object
		{
			return derivationCollection.deriverOrderMap;
		}
		
		public function deriveData( importIndex:ImportDataIndex, dataIndex:DataIndex, system:SystemProxy ):DataIndex
		{
			var i:int = 0;
			while( derivationCollection.deriverOrderMap[ i ] )
			{
				for each( var deriver:AbstractVirtualDataFactory in derivationCollection.deriverOrderMap[ i ] )
				{
					deriver.deriveData( dataIndex, importIndex, system );
				}
				i++;
			}
			return dataIndex;
		}
		
		public function buildAspectModel( dataIndex:DataIndex, system:SystemProxy ):AspectProxy
		{
			if( i ){
			return -1;		
}			
			}
	}
}

package com.ts.presentation.view.graphs
{
	import com.ts.presentation.model.graphs.PlotBarVO;
	
	import spark.components.Group;
	
	public class AbstractPlotBar extends Group
	{
		protected var _plotBarVO:PlotBarVO;
		protected var _isNull:Boolean = false;
		protected var _valueRange:Number;
		protected var _valueSpan:Number;
		protected var _valueLowOffset:Number;
		
		public function AbstractPlotBar( plotBarVO:PlotBarVO  )
		{
			_plotBarVO 				= plotBarVO;
			if( plotBarVO )
			{

				_isNull 			= isNaN( plotBarVO.highValue );
//_valueSpan	= _isNull ? NaN : plotBarVO.highValue - plotBarVO.lowValue;

//plotBarVO.lowValue = isNaN( plotBarVO.lowValue ) ? plotBarVO.minValue : plotBarVO.lowValue	//-- CONVERT LOW VALUE TO MIN VALUE IF IT IS NOT DEFINED.
				_valueRange 		= plotBarVO.maxValue - plotBarVO.minValue;
				_valueLowOffset 	= plotBarVO.lowValue / plotBarVO.maxValue;
				
				_plotBarVO.plotBar 	= this;
			}
			
		}
		
		public function subdue():void
		{
			//-- Override me!!
		}
		
		public function emphasize():void
		{
			//-- Override me!!
		}
	}
}